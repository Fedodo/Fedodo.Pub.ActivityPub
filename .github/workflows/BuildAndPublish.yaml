name: BuildAndPublish

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  Prepare:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set PUBSPEC_VERSION
        run: |
          version=$(grep 'version:' pubspec.yaml | tail -n1 | awk '{ print $2}')

          echo $version

          echo "PUBSPEC_VERSION=$version" >> "$GITHUB_ENV"

      - run: echo "${{ env.PUBSPEC_VERSION }}"

      - name: Check for Tag
        run: |
          TAG="v${{ env.PUBSPEC_VERSION }}"
          if git show-ref --tags --verify --quiet "refs/tags/${TAG}"; then
            echo "Tag ${TAG} exists"
            exit 1
          else
            echo "Tag ${TAG} does not exist"
          fi

      - name: Update Changelog
        run: |
          commits=$(git log $(git describe --tags --abbrev=0)..HEAD --oneline | cut -c 8- | sed -e 's|^|- |' | cat | sed ':a;N;$!ba;s|\n|\\n|g')
          sed -i "1s|^|## v${{ env.PUBSPEC_VERSION }}\n\n$(echo "$commits")\n\n|" CHANGELOG.md

      - name: Commit Changelog
        uses: test-room-7/action-update-file@v1
        with:
          file-path: CHANGELOG.md
          commit-msg: 📝 Updated Changelog
          github-token: ${{ secrets.GITHUB_TOKEN }}

  CreateTag:
    runs-on: ubuntu-latest
    needs: Prepare
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - run: git pull origin main

      - name: Set PUBSPEC_VERSION
        run: |
          version=$(grep 'version:' pubspec.yaml | tail -n1 | awk '{ print $2}')

          echo $version

          echo "PUBSPEC_VERSION=$version" >> "$GITHUB_ENV"

      - run: echo "${{ env.PUBSPEC_VERSION }}"

      - run: echo "$(cat CHANGELOG.md)"

      - run: |
          git tag v${{ env.PUBSPEC_VERSION }}

          git remote set-url origin "https://LNA-DEV:${{ secrets.GH_TOKEN }}@github.com/Fedodo/Fedodo.Pub.ActivityPub.git"

          git push origin v${{ env.PUBSPEC_VERSION }}

      - name: Create Release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: "${{ secrets.GH_TOKEN }}"
        with:
          tag_name: v${{ env.PUBSPEC_VERSION }}
          release_name: v${{ env.PUBSPEC_VERSION }}
          draft: false
          prerelease: false

  Publish:
    needs: CreateTag
    runs-on: ubuntu-latest
    permissions:
      id-token: write # This is required for requesting the JWT
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - run: git pull origin main

      # Setup Dart SDK with JWT token
      - uses: dart-lang/setup-dart@d6a63dab3335f427404425de0fbfed4686d93c4f

      # Minimal package setup and dry run checks.
      - name: Install dependencies
        run: dart pub get
        # working-directory: ${{ inputs.working-directory }}

      - name: Publish - dry run
        run: dart pub publish --dry-run
        # working-directory: ${{ inputs.working-directory }}

      # Publishing...
      - name: Publish to pub.dev
        run: dart pub publish -f
        # working-directory: ${{ inputs.working-directory }}
